1. 无参调用（复用最后一次调用时传入的参数） *
2. 高频次重复渲染性能 *
3. 同一画布可以展现多个子图
4. 调整子图的默认配置的代码书写形式，以简化子图共有的配置的识别难度 *
5. 明细查看、拖动功能抽取 *

----------------------------
1. 左右侧裁剪，保证关键配置的不同取值下的健壮性 *
2. 流畅移动 *
3. 封装拖动、翻转拖动 *
4. 尺寸改变自动重绘
5. 数据改变自动重绘 *
6. 位移改变自动重绘 *
7. 封装API，自动创建canvas *
   1) 应用提供容器，图形创建画布
   2) 绘制顺序与子图添加顺序一致
8. 蜡烛图允许与部分子图融合绘制 *

----------------------------
待办事项：
1.  2019.01.09 14:10 - 需将K线图形组件中的类封装抽取至外层
    * 2019.01.09 15:52 完成
2.  2019.01.09 15:53 - 需在K线图中实现走势图（均线以趋势图配置的形式绘制）
    * 2019.01.09 20:53 完成
3.  2019.01.09 14:15 - 需思考分时图的实现方式（按交易节，不受限于可绘制空间，将所有数据均绘制至界面上）
    方案一：添加配置项：sections: [{beginTime: "", endTime: "", dataCount: 32}]
    方案二：添加API：setDataList
    方案三：
      1) 添加配置项：axisXTickGenerateIndicator - 特定数据对应的横坐标刻度绘制与否的指示器
      2) 智能化配置项：groupGap，使得可以赋值function以动态决定两组数据之间的间隔

4.  2019.01.09 14:21 - 需修复故障：测试用例test7中，将图形向右拉至最左侧时，即使将鼠标的悬浮位置在图形正文的左侧，程序也会错误地绘制出一条数据明细查阅线条
    * 2019.01.09 16:07 完成
5.  2019.01.09 14:32 - gulpfile2.js需要更新
6.  2019.01.09 17:52 - 需修复故障：测试用例test6中，MA线左侧没有正确地延伸至数据左边界
    * 2019.01.14 17:40 - 完成
7.  2019.01.09 20:53 - 需修复故障：走势图拖动时的渲染表现不连贯
    - 2019.01.10 11:19 完成。受限于当前的裁剪思路，暂无法实现全连贯拖动
    * 2019.02.13 13:04 完成。
8.  2019.01.31 14:38 - 需要实现统一的子图边界裁剪操作，使得能够以类似开关的方式，以比较小的代码改动成本，达到“决定是否看到左侧边界之外绘制的数据”的效果。需要调整所有子图，使得都能满足该要求
    * 2019.02.13 13:05 完成。
9.  2019.01.31 15:33 - 需优化重绘事件的发起机制，解决 renderingpositionchange 和 renderingdatachange 事件连续触发，导致图形中间执行无用绘制动作，进而影响绘制性能的问题
    - 2019.02.13 13:05 保持现状。
10. 2019.02.01 11:07 - 需引入并贯彻概念“展现中的数据”和“被擦除展现的数据”等概念，并约定：
    1) 总数据个数 total data group count = 不可绘制个数 irrenderable data group count + 可绘制个数 renderable data group count
    2) 可绘制个数 renderable data group count > 绘制了的数据个数 rendering data group count + 经过的数据个数 elapsed data group count
    3) 绘制了的数据个数 rendering data group count = 可见的绘制了的数据个数 visible rendering data group count + 被擦除的绘制了的数据个数 erased rendering data group count
    - 2019.02.13 13:05 完成。